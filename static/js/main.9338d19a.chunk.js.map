{"version":3,"sources":["logo.svg","List.js","App.js","reportWebVitals.js","index.js"],"names":["Row","index","style","elem","data","className","dish","List","useState","setData","getData","a","axios","method","url","params","size","results","concat","console","error","useEffect","stopLoadMore","length","height","width","isItemLoaded","itemCount","loadMoreItems","onItemsRendered","ref","itemSize","itemData","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAAe,G,MAAA,IAA0B,kC,gGCQzC,SAASA,EAAT,GAAsC,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,MACdC,EAD6B,EAARC,KACTH,GAElB,OACE,qBACEC,MAAOA,EADT,SAGE,qBAAKG,UAAU,YAAf,SACCF,EAAKG,SA+DGC,MAzDf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOJ,EAAP,KAAaK,EAAb,KADc,SAQCC,IARD,2EAQd,8BAAAC,EAAA,+EAEoCC,IAAM,CACpCC,OAAQ,MACRC,IAAK,mDACLC,OAAQ,CACNC,KAAM,OANd,gBAEkBC,EAFlB,EAEYb,KAQRK,GAAQ,SAAAL,GAAI,OAAIA,EAAKc,OAAOD,MAVhC,gDAYIE,QAAQC,MAAR,MAZJ,yDARc,wBAIdC,qBAAU,WACRX,EAAQD,KACP,IAkBH,IAAMa,EAAelB,EAAKmB,QAtBV,IAwBhB,OACE,qBACElB,UAAU,OADZ,SAGE,cAAC,IAAD,UACG,gBAAEmB,EAAF,EAAEA,OAAQC,EAAV,EAAUA,MAAV,OACC,cAAC,IAAD,CACEC,aAAc,SAAAzB,GAAK,QAAIqB,GAAsBrB,EAAQG,EAAKmB,OAAS,GACnEI,UAAWvB,EAAKmB,OAChBK,cAAe,kBAAMlB,KAHvB,SAKG,gBAAGmB,EAAH,EAAGA,gBAAiBC,EAApB,EAAoBA,IAApB,OACC,cAAC,IAAD,CACEN,OAAQA,EACRC,MAAOA,EACPM,SAAU,GACVC,SAAU5B,EACVuB,UAAWvB,EAAKmB,OAChBM,gBAAiBA,EACjBC,IAAKA,EAPP,SASC9B,aCrDAiC,MAXf,WACE,OACE,sBAAK5B,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,qBAAK6B,IAAKC,EAAM9B,UAAU,WAAW+B,IAAI,WAE3C,cAAC,EAAD,QCCSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9338d19a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { useState, useEffect } from 'react'\nimport { FixedSizeList } from 'react-window';\nimport AutoSizer from 'react-virtualized-auto-sizer'\nimport InfiniteLoader from \"react-window-infinite-loader\";\nimport axios from 'axios'\n\nimport './list.css'\n\nfunction Row({ index, style, data }) {\n  const elem = data[index]\n\n  return (\n    <div\n      style={style}\n    >\n      <div className=\"list-item\">\n      {elem.dish}\n      </div>\n    </div>\n  )\n}\n\nfunction List() {\n  const [data, setData] = useState([])\n  const maxSize = 1000\n\n  useEffect(() => {\n    getData(setData)\n  }, [])\n\n  async function getData() {\n    try {\n      const { data: results } = await axios({\n        method: 'get',\n        url: 'https://random-data-api.com/api/food/random_food',\n        params: {\n          size: 100\n        }\n      })\n\n      setData(data => data.concat(results))\n    } catch(error) {\n      console.error(error)\n    }\n  }\n\n  const stopLoadMore = data.length >= maxSize\n\n  return (\n    <div\n      className='list'\n    >\n      <AutoSizer>\n        {({height, width}) => (\n          <InfiniteLoader\n            isItemLoaded={index => stopLoadMore ? true : index < data.length - 1}\n            itemCount={data.length}\n            loadMoreItems={() => getData()}\n          >\n            {({ onItemsRendered, ref }) => (\n              <FixedSizeList\n                height={height}\n                width={width}\n                itemSize={40}\n                itemData={data}\n                itemCount={data.length}\n                onItemsRendered={onItemsRendered}\n                ref={ref}\n              >\n              {Row}\n              </FixedSizeList>\n            )}\n          </InfiniteLoader>\n        )}\n      </AutoSizer>\n    </div>\n  );\n}\n\nexport default List\n","import logo from './logo.svg';\nimport './App.css';\n\nimport List from './List'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <List />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}